import {
  Body,
  Controller,
  Delete,
  Get,
  Logger,
  Param,
  Post,
  Req,
} from '@nestjs/common';
import { RequireAdmin, Root } from '~/authorization';
import { AuthenticatedRequest } from '~/authorization/authenticated.request';
import { EventStore } from '~/infrastructure/event-store';
import { Event } from '~/infrastructure/event-store/event.entity';
import { RestartService } from './restart.service';
import { TraccarAdapter } from '~/infrastructure/traccar';

function stripsecrets(key: string, value: string | undefined) {
  if (!value) {
    return value;
  }
  const secrets = ['password', 'secret', 'token', 'key'];
  if (secrets.find((secret) => key.toLowerCase().includes(secret))) {
    return value[0] + '***' + value[value.length - 1];
  }
  return value;
}

/**
 * AdminController is responsible for handling event-related
 * requests. It accesses the system services and data stores to perform actions
 * such as restarting the system, managing events, etc. This controller is
 * specifically designed for use by administrators and requires appropriate
 * authorization for access which is currently not activated
 *
 * The following HTTP methods are supported:
 * - POST /admin/restart: Restart the system.
 * - GET /admin/events: Retrieve an event.
 * - GET /admin/env: Get the current environment variables.
 * - POST /admin/events: Add a new event.
 * - DELETE /admin/events/eventType/:eventType: Delete an event type.
 * - DELETE /admin/events/:aggregateType/:aggregateId/:eventId: Delete an event.
 * - DELETE /admin/aggregate/:type/:id: Delete an aggregate if date is bigger than today
 * - DELETE /admin/positions/:traccarid: Delete positions for a specific device.
 *
 * Note that every request requires an authenticated user and some methods require a specific
 * user role (e.g. administrator).
 *
 * Each request is logged for auditing and debugging purposes.
 *
 * @param {RestartService} restartService - Service for restarting functionality
 * @param {EventStore} eventStore - Store for event data and operations
 * @param {TraccarAdapter} traccar - Adapter for Traccar device operations
 */
@Controller('admin')
@RequireAdmin()
export class AdminController {
  private logger = new Logger(AdminController.name);

  constructor(
    private readonly restartService: RestartService,
    private readonly eventStore: EventStore,
    private readonly traccar: TraccarAdapter,
  ) {}

  // Logs the email of the user who requested a restart and executes the service restart method
  @Post('restart')
  restart(@Req() req: AuthenticatedRequest) {
    this.logger.warn(`Restart request by ${req.user?.email}`);
    this.restartService.restart();
    return {};
  }

  @Get('events')
  getEvents(@Req() req: AuthenticatedRequest) {
    this.logger.log(`GetEvents ${req.user?.email}`);
    return this.eventStore.findAll();
  }

  // Returns an object containing environment variables with sensitive data stripped
  @Get('env')
  getEnv() {
    this.logger.debug(`env`);

    const env = process.env;
    return Object.entries(env).reduce<Record<string, string | undefined>>(
      (accu, [key, value]) => ({ ...accu, [key]: stripsecrets(key, value) }),
      {},
    );
  }

  // Handles POST request to 'events', logs the requester, persists the event and returns the created event.
  @Post('events')
  postEvent(@Body() event: Event, @Req() req: AuthenticatedRequest) {
    this.logger.warn(`Event posted by ${req.user?.email}`);
    this.eventStore.persist(event);
    return this.eventStore.findOne(event.eventId);
  }

  @Delete('events/eventType/:eventType')
  @Root()
  deleteEventType(
    @Param('eventType') eventType: string,
    @Req() req: AuthenticatedRequest,
  ) {
    this.logger.warn(`Event type ${eventType} deleted by ${req.user?.email}`);

    return this.eventStore.deleteEventType(eventType);
  }

  @Delete('events/:aggregateType/:aggregateId/:eventId')
  @Root()
  async deleteEvent(
    @Param('aggregateType') aggregateType: string,
    @Param('aggregateId') aggregateId: number,
    @Param('eventId') eventId: number,
    @Req() req: AuthenticatedRequest,
  ) {
    this.logger.warn(
      `Event ${aggregateType}/${aggregateId}/${eventId} deleted by ${req.user?.email}`,
    );
    return this.eventStore.deleteEvent(aggregateType, aggregateId, eventId);
  }

  // Deletes an aggregate based on 'type' and 'id' parameters and log the warning
  @Delete('aggregate/:type/:id')
  @Root()
  deleteAggregate(
    @Param('type') type: string,
    @Param('id') id: number,
    @Req() req: AuthenticatedRequest,
  ) {
    this.logger.warn(`Aggregate ${type}:${id} deleted by ${req.user?.email}`);
    return this.eventStore.deleteAggregate(type, id);
  }

  @Delete('positions/:traccarid')
  @Root()
  deletePositions(
    @Param('traccarid') traccarid: string,
    @Req() req: AuthenticatedRequest,
  ) {
    this.logger.warn(
      `Positions deleted for device ${traccarid} deleted by ${req.user?.email}`,
    );
    return this.traccar.deleteAllPositionsForDevice(traccarid);
  }
}
