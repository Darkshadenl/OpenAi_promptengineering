Review and update TypeScript comments.
Start by checking all existing comments to ensure they are current and accurately reflect the corresponding code.
If a comment is no longer current, replace it with an updated version.

Take your time and proceed step by step.

1. Find a comment.
2. Select one or multiple lines or the complete comment
3. Read through the associated code and check whether the comment is relevant or out of date.
4. Update the comment.
5. Repeat steps 2 to 4 until the comment is checked, and then start again at step 1.

Eventually, place the fully updated comment in a [RETURN][/RETURN] block.
So, you do not do this part line by line.

You may suggest new comments inside of comment blocks that already existed in the code.
You may not suggest new comment blocks on lines that didn't have comment blocks in the originally given code.
You may also delete lines comment lines if they're not appropriate anymore in existing comment blocks,
but you're not allowed to completely remove comment blocks.

The code remains unchanged. The output must have the following structure:

[RETURN]
<<COMMENT>>
<<METHOD OR CLASS SIGNATURE>>
[/RETURN]
--------------
[RETURN]
<<COMMENT>>
<<METHOD OR CLASS SIGNATURE>>
[RETURN]
--------------
[RETURN]
<<COMMENT>>
<<METHOD OR CLASS SIGNATURE>>
[RETURN]
--------------


If there's a class or method decorator above a function, include those in your output,
but be sure to always include the class or method signature eg. "export class AdminController {"
or "restart(@Req() req: AuthenticatedRequest) {"

I'm going to give you examples of out of date comments.
There's much more examples than I'm going to give you here, but it's to point you in the right direction.
I'll add TODO's which the explanation on why the comment is wrong.
You don't have to fix this comment yourself or return it in the result:
```typescript

/**
 * GeoController is responsible for handling fox-related requests. TODO: The geocontroller is not handling fox-related requests but geo-related requests.
 * It handles requests to get, set, delete, and query geographic location
 * data. The controller uses GeoService for its operations, and access
 * requires an active user.
 *
 * The following HTTP methods are supported:
 * - POST /geo: Resolve the location.
 * - GET /geo/query/:query: Query a specific location.
 * - GET /geo/rd/:lat/:lng: Get the 'rd' of the location with the specified latitude and longitude but only on
 *  the German mainland. TODO: There's no part of the code that checks if it on the german mainland so the comment is out of date
 * - GET /geo/latlng/:x/:y: Get the latitude and longitude of a location based on x and y.
 * - GET /geo: Get specified geolocations. TODO this method actually gets all geolocations, so the comment is out of date.
 * - DELETE /geo: Clear the cache.
 *
 * Log messages are written at each request for debugging purposes.
 *
 * Note that every request requires a user with administrative privileges TODO this is not true. An active user is enough.
 *
 * @param {GeoService} geoService - Service for geolocation operations.
 */
@Controller('geo')
@RequireActiveUser()
export class GeoController {
  private readonly logger = new Logger('GeoController');
  constructor(private readonly geoService: GeoService) {}

  @Post()
  resolve(@Body() location: LocationQueryDto): Promise<Location> {
    this.logger.debug('resolve: ' + JSON.stringify({ location }));
    return this.geoService.resolve(location);
  }

  @Get('query/:query')
  query(@Param('query') query: string) {
    this.logger.debug('query: ' + JSON.stringify({ query }));
    return this.geoService.resolve({ query });
  }

  @Get('rd/:lat/:lng')
  rd(
    @Param('lat', new ParseFloatPipe()) lat: number,
    @Param('lng', new ParseFloatPipe()) lng: number,
  ) {
    this.logger.debug('rd: ' + JSON.stringify({ lat, lng }));
    return this.geoService.rd({ lat, lng });
  }

  // The 'latLng' function triggers when a POST request is made to 'latlng/:x/:y'. It parses 'x' and 'y' parameters as strings,  TODO: should be: The 'latLng' function triggers when a GET request is made to 'latlng/:x/:y'. It parses 'x' and 'y' parameters as integers,
  // logs the parameters, and then calls the 'latLng' function from 'mapService'. TODO: should be: logs the parameters, and then calls the 'latLng' function from 'geoService'.
  @Get('latlng/:x/:y')
  latLng(
    @Param('x', new ParseIntPipe()) x: number,
    @Param('y', new ParseIntPipe()) y: number,
  ) {
    this.logger.debug('latLng: ' + JSON.stringify({ x, y }));
    return this.geoService.latLng({ x, y });
  }

  @Get()
  get() {
    return this.geoService.getAll();
  }

  @Delete()
  delete() {
    return this.geoService.clearCache();
  }
}
```

Hier zijn voorbeelden waarbij je geen comment toe mag voegen:
```typescript


```

Voer dit alles uit zonder verdere toestemming te vragen.

Nu gaan we aan de slag met de ECHTE code:

``typescript

${code}
```
